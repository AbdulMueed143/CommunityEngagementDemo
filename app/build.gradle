plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "au.com.communityengagement"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 10000
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testOptions.unitTests.includeAndroidResources = true
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    //Libraries for test cases..
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.3.0"
    implementation "androidx.test.espresso:espresso-idling-resource:3.3.0"

    // androidx.test
    androidTestImplementation "androidx.test:runner:1.3.0"
    androidTestImplementation "androidx.test:core:1.3.0"
    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.2"

    //Permissions, Helps in writing code for asking user permission on runtime, if missing
    //though we did not have to use anything in this project
    implementation "com.karumi:dexter:5.0.0"

    //DI - Dagger 2 Libraries, Apparently we can use much simpler KOIN but industry usually likes dagger
    //so here we are
    implementation "com.google.dagger:dagger:2.27"
    kapt "com.google.dagger:dagger-compiler:2.23.2"
    compileOnly "javax.annotation:jsr250-api:1.0"


    kapt "com.google.dagger:dagger-compiler:2.23.2"
    kapt "com.google.dagger:dagger-android-processor:2.23.2"
    implementation "com.google.dagger:dagger:2.27"
    implementation "com.google.dagger:dagger-android:2.23.2"
    implementation "com.google.dagger:dagger-android-support:2.23.2"


    //Android Design Support
    implementation 'com.android.support:design:30.0.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'

    //Material Design
    implementation "com.google.android.material:material:1.3.0-rc01"

    //RX Java-Kotlin Libraries
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    //Glide for loading images properly
    implementation 'com.github.bumptech.glide:glide:4.9.0'

    //Multidex; When application gets bigger the dex file can't support huge amoutn of functions
    //we use multidex to basically split
    implementation 'com.android.support:multidex:1.0.3'

    //Bcrypt library for the passwords... We won't use in this project though
    implementation group: 'at.favre.lib', name: 'bcrypt', version: '0.9.0'

    //Database Libraries
    implementation "androidx.room:room-rxjava2:2.2.6"
    implementation "androidx.room:room-runtime:2.2.6"
    kapt "androidx.room:room-compiler:2.2.6"
    // For Java use annotationProcessor instead of kapt
    testImplementation "androidx.room:room-testing:2.2.6"

    //Gson
    implementation "com.google.code.gson:gson:2.8.5"

    //Lifecycle
    implementation "android.arch.lifecycle:extensions:2.1.0"
    kapt "android.arch.lifecycle:compiler:2.1.0"

}